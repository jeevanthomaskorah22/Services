pipeline {
    agent any

    environment {
        IMAGE_NAME = 'jtk022/product-service:latest'
        PROVIDER_NAME = 'ProductService'
        PACT_CONTRACT_REPO = 'https://github.com/Anagha-mahesh/microservice_pacts'
        PACT_CONTRACT_DIR = 'contracts'
    }

    stages {
        stage('Checkout Product Service Code') {
            steps {
                git url: 'https://github.com/jeevanthomaskorah22/Services', branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('product-service') {
                    bat "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Docker Login & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    bat "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                    bat "docker push ${IMAGE_NAME}"
                }
            }
        }

        stage('Run Container') {
            steps {
                script {
                    bat "docker stop product-service || exit 0"
                    bat "docker rm product-service || exit 0"
                    bat "docker run -d -p 5003:5000 --name product-service ${IMAGE_NAME}"
                    bat "ping -n 11 127.0.0.1 > nul"
                }
            }
        }

        stage('Clone Pact Contracts Repo') {
            steps {
                dir("${PACT_CONTRACT_DIR}") {
                    git url: "${PACT_CONTRACT_REPO}", branch: 'main'
                }
            }
        }

        stage('Debug Contract Files') {
            steps {
                bat "echo Listing contents of the contracts directory:"
                bat "dir ${PACT_CONTRACT_DIR}"
                bat "echo Displaying content of orderservice-productservice.json (if exists):"
                bat "type ${PACT_CONTRACT_DIR}\\orderservice-productservice.json"
            }
        }

        stage('Verify Pact Contracts') {
            steps {
                script {
                    def pactFiles = [
                        'orderservice-productservice.json',
                        'UIService-ProductService.json'
                    ]
                    for (contract in pactFiles) {
                        // For Windows paths in Docker, it's safer to construct the absolute path within the container.
                        // The mounted volume is at /pacts, so the files will be at /pacts/filename.json
                        def containerPactPath = "/pacts/${contract}"
                        bat """
                        echo Verifying pact contract: ${contract}
                        docker run --rm ^
                          -v "%WORKSPACE%\\${PACT_CONTRACT_DIR}:/pacts" ^
                          pactfoundation/pact-cli:latest ^
                          verify ^
                          --provider-base-url=http://host.docker.internal:5003 ^
                          --pact-url=${containerPactPath} ^
                          --provider=${PROVIDER_NAME}
                        """
                    }
                }
            }
        }

    post {
        always {
            echo "Cleaning up..."
            bat "docker stop product-service || exit 0"
            bat "docker rm product-service || exit 0"
            bat "docker system prune -f"
        }
    }
}
