pipeline {
    agent any

    environment {
        PACT_CLI_IMAGE = 'pactfoundation/pact-cli:latest'
        PACT_BROKER_URL = 'https://nitc-0bb42495.pactflow.io'  // Your PactFlow URL
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/jeevanthomaskorah22/Services', branch: 'main'
            }
        }

        stage('Build & Run Product Service') {
            steps {
                dir('product-service') {
                    script {
                        bat "docker build -t jtk022/product-service:latest ."
                    }
                }
                script {
                    bat "docker stop product-service || exit 0"
                    bat "docker rm product-service || exit 0"
                    bat "docker run -d -p 5003:5000 --name product-service jtk022/product-service:latest"
                }
            }
        }

        stage('Verify Pact Contracts') {
    steps {
        powershell(script: '$commitHash = git rev-parse --short HEAD; echo $commitHash', returnStdout: true).trim()
        withEnv(["PACT_PROVIDER_VERSION=$commitHash"]) {
            withCredentials([string(credentialsId: 'PACTFLOW_TOKEN', variable: 'PACT_TOKEN')]) {
                script {
                    bat """
                    docker run --rm ^
                      --network="host" ^
                      pactfoundation/pact-cli:latest ^
                      broker verify ^
                      --provider-base-url=http://host.docker.internal:5003 ^
                      --provider=ProductService ^
                      --consumer-version-selectors='[{"mainBranch": true}, {"deployedOrReleased": true}]' ^
                      --enable-pending ^
                      --enable-wip-pacts ^
                      --publish-verification-results ^
                      --provider-app-version=%PACT_PROVIDER_VERSION% ^
                      --broker-base-url=https://nitc-0bb42495.pactflow.io ^
                      --broker-token=${PACT_TOKEN}
                    """
                }
            }
        }
    }
}

    }

    post {
        always {
            echo "Cleaning up..."
            bat "docker stop product-service || exit 0"
            bat "docker rm product-service || exit 0"
            bat "docker system prune -f"
        }
    }
}
