pipeline {
    agent any

    environment {
        IMAGE_NAME = 'jtk022/order-service:latest'
        PACT_BROKER_URL = 'https://nitc-0bb42495.pactflow.io'
        ORDER_SERVICE_CONTAINER_PORT = 8002
        ORDER_SERVICE_HOST_PORT = 8002
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/jeevanthomaskorah22/Services', branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('order-service') {
                    bat "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Docker Login & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    bat "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                    bat "docker push ${IMAGE_NAME}"
                }
            }
        }

        stage('Run Order-Service Container') {
            steps {
                script {
                    bat "docker stop order-service || exit 0"
                    bat "docker rm order-service || exit 0"
                    bat "docker run -d -p ${ORDER_SERVICE_HOST_PORT}:${ORDER_SERVICE_CONTAINER_PORT} --name order-service ${IMAGE_NAME}"
                }
            }
        }

        stage('Wait for Container Startup') {
            steps {
                echo "Waiting 20 seconds for order-service to start..."
                sleep time: 20, unit: 'SECONDS'
            }
        }

        stage('Verify Pacts using Pact CLI (Ruby)') {
            steps {
                withCredentials([string(credentialsId: 'PACTFLOW_TOKEN', variable: 'PACT_TOKEN')]) {
                    script {
                        def providerVersion = bat(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        bat """
                        pact-broker verify ^
                          --provider=OrderService ^
                          --provider-base-url=http://localhost:${ORDER_SERVICE_HOST_PORT} ^
                          --broker-base-url="${PACT_BROKER_URL}" ^
                          --broker-token="${PACT_TOKEN}" ^
                          --enable-pending ^
                          --publish-verification-results ^
                          --provider-app-version="${providerVersion}" ^
                          --consumer-version-selectors='[{"mainBranch": true}, {"deployedOrReleased": true}]'
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up..."
            bat "docker stop order-service || echo 'Not running'"
            bat "docker rm order-service || echo 'Not found'"
            bat "docker image prune -f --filter \"dangling=true\""
        }
        success {
            echo "✅ Pipeline completed successfully."
        }
        failure {
            echo "❌ Pipeline failed. Check logs."
        }
    }
}
