pipeline {
    agent any

    environment {
        IMAGE_NAME = 'jtk022/order-service:latest'
        PACT_REPO = 'https://github.com/Anagha-mahesh/microservice_pacts.git'
        PACT_CLI_IMAGE = 'pactfoundation/pact-cli:latest'
        PACT_BROKER_URL = 'https://nitc-0bb42495.pactflow.io'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/jeevanthomaskorah22/Services', branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('order-service') {
                    script {
                        bat "docker build -t ${IMAGE_NAME} ."
                    }
                }
            }
        }

        stage('Docker Login & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        bat "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                        bat "docker push ${IMAGE_NAME}"
                    }
                }
            }
        }

        stage('Run Container') {
            steps {
                script {
                    bat "docker stop order-service || exit 0"
                    bat "docker rm order-service || exit 0"
                    bat "docker run -d -p 8002:8002 --name order-service ${IMAGE_NAME}"
                }
            }
        }

        stage('Wait for Startup') {
            steps {
                echo "Waiting for OrderService to be ready..."
                sleep time: 15, unit: 'SECONDS'
            }
        }

        stage('Verify Pact Contracts from PactFlow') {
            steps {
                withCredentials([string(credentialsId: 'PACTFLOW_TOKEN', variable: 'PACT_TOKEN')]) {
                    script {
                        def providerVersion = powershell(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                        echo "Using Pact provider version for verification: ${providerVersion}"

                        bat """
                        docker run --rm ^
                          --network="host" ^
                          ${PACT_CLI_IMAGE} ^
                          verify ^
                          --provider=OrderService ^
                          --provider-base-url=http://host.docker.internal:8012 ^
                          --broker-base-url=${PACT_BROKER_URL} ^
                          --consumer-version-selectors='[{"mainBranch": true}, {"deployedOrReleased": true}]' ^
                          --enable-pending ^
                          --enable-wip-pacts ^
                          --publish-verification-results ^
                          --provider-app-version=${providerVersion} ^
                          --broker-token=${PACT_TOKEN}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up..."
            bat "docker stop order-service || exit 0"
            bat "docker rm order-service || exit 0"
            bat "docker system prune -f"
        }
    }
}
