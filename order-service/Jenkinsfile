pipeline {
    agent any

    environment {
        IMAGE_NAME = 'jtk022/order-service:latest'
        PACT_REPO = 'https://github.com/Anagha-mahesh/microservice_pacts.git'
        PACT_CONTRACT = 'orderservice-productservice.json'
        PACT_CLI_IMAGE = 'pactfoundation/pact-cli:latest'
        PACT_BROKER_URL = 'https://nitc-0bb42495.pactflow.io' // Update with your actual Pact Broker URL
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/jeevanthomaskorah22/Services', branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('order-service') {
                    script {
                        bat "docker build -t ${IMAGE_NAME} ."
                    }
                }
            }
        }

        stage('Docker Login & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        bat "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                        bat "docker push ${IMAGE_NAME}"
                    }
                }
            }
        }

        stage('Run Container') {
            steps {
                script {
                    bat "docker stop order-service || exit 0"
                    bat "docker rm order-service || exit 0"
                    bat "docker run -d -p 5001:5000 --name order-service ${IMAGE_NAME}"
                }
            }
        }

        stage('Clone Pact Contract Repo') {
            steps {
                script {
                    bat 'rmdir /S /Q microservice_pacts || exit 0'
                    bat "git clone ${PACT_REPO} microservice_pacts"
                }
            }
        }

stage('Publish Pact Contract') {
    steps {
        withCredentials([string(credentialsId: 'PACTFLOW_TOKEN', variable: 'PACT_TOKEN')]) {
            script {
                def pactVersion = bat(
                    script: "git rev-parse --short HEAD",
                    returnStdout: true
                ).trim()

                bat """
                docker run --rm ^
                  -v %cd%\\microservice_pacts:/pacts ^
                  pactfoundation/pact-cli:latest ^
                  publish /pacts/orderservice-productservice.json ^
                  --consumer-app-version=${pactVersion} ^
                  --broker-base-url=https://nitc-0bb42495.pactflow.io ^
                  --broker-token=${PACT_TOKEN}
                """
            }
        }
    }
}


    }

    post {
        always {
            echo "Cleaning up..."
            bat "docker system prune -f"
        }
    }
}
